TODO stuff:

Find movement angle (ie what direction are you currently moving, not necessarily facing)
More info about the camera:

TJ Blakely: Tiffanyfruit: I believe the camera has a set amount of time to reach your kong and its speed adjusts according to the distance
Tiffanyfruit: in that respect, it explains why N64 camera follows through STVW
Tiffanyfruit: and VC does not
TJ Blakely: I kind of just thought of that randomly
TJ Blakely: it makes sense to me
TJ Blakely: but is there anything in memory that would indicate the correct or incorrectness of that statement?

sound addresses
0x79126e to 0x7e0000

Confirmed multipliers

0  1.0x -> DCX 3.5
1  1.5x -> DXZ 5.25
2  2.0x -> DXZ 7
3  2.5x -> DXZ 8.75
4  3.0x -> DXZ 10.5
5  3.5x -> DXZ 12.25
6  4.0x -> DXZ 14
7  4.5x -> DXZ 15.75
8  5.0x -> DXZ 17.5

 7.5x -> DXZ 26.25
 8.0x -> DXZ 28
xxxxxxxxxxxxxxxx
 9.0x -> DXZ 31.5

Dogadon 1 mystery menu fight cutscenes
0 -> idk

2 -> cutscene played as barrel hits
3 -> Standard dogadon gets hit into lava

9 -> Final dogadon 1 hit (plays on "Dogawrongkey" and spawns key 5 for some reason)
11 -> Long intro to fight
20 -> Short intro to fight

Normal hit: x -> 2 -> 3
Last hit:   x -> 9
DDQ:        x -> 9

Dogadon 2 mystery menu fight cutscenes
1 -> Long intro to fight
3 -> Dogadon gets hit into lava
5 -> Firewall
7 -> Lower ground
9 -> Final dogadon 2 hit

Normal hit: x -> 3

4/12 -> 0x4ab0b0 -> boulder 0x99

0x4819e0

Pointer lists

~0x7fb930
~0x7fbff0

kong    804c5ac0 <- Kong pointer + 32c?
holding 804c5dec

barrel 804b7540 -> 804b76b8 (in hand pointer?)
barrel 804bb600 ->
barrel 804b90a0
barrel 804bcdd0
barrel 804bdf80

shade byte: 0x4b76ad

0x3a2190

----------------------------------

0x2f5f00 <- Kremling

0x452e00 <- Stored object?
0x452790

804c4430 <- camera
804D9170 <- Kong object
804c34d0 <- Fake kong

3d9854 <- stored X

803D8F10

803D8B40

803d9590 <- Stored value object thingo?

803e6b50 -> 803e67f0 -> 803e6650 -> 803e6600 -> 803e65b0 -> 803e6500 -> 803e6450 -> 803e0040 -> 803dfff0 -> 803dffa0 -> 803dfd90 -> 803d9980 -> 803D98F0 -> 803D9890 -> 803d9590

30bdf0 <- Kong
30be53 <- "Visible" 127 visible, 0 not

----------------------------------

Key priority stuff:

Check ram watch for locations in memory
Key byte is a bitfield
Seemingly random distance apart in memory, but fairly close together

Key 1, 2

0000 0100 = 0x04 = Key collected
0000 1000 = 0x08 = Seen opening level cutscene (2?)

Key 3

0000 0100 = 0x04 = Key collected
0001 0000 = Seen opening level cutscene

Key 4

0000 0001 = 0x01 = Key collected

Key 5, 6

0001 0000 = 0x10 = Key collected

Key 7

0010 0000 = 0x20 = Key collected

Key 8

0001 0000 = 0x10 = Key collected

Key priority stuff

when klumsy loads, pick highest key from inventory to turn first
if key plays cutscene, area reloads
if key doesn't play cutscene, pick lowest key to turn next

--------------
-- Mad Jack --
--------------

T = Ticks til next action
R = Actions remaining
A = Action type
P = Current position
N = Next position
W = White switch position
B = Blue switch position

NTSC-U MJ state object layout

  0 1 2 3  4 5 6 7  8 9 A B  C D E F
0 xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx
1 xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx
2 xxxxxxxx xxxxxxxx xxxxxxxx xxTTxxxx
3 xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx
4 xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx
5 xxxxxxxx xxxxxxxx RRAAxxxx xxxxxxxx
6 PPNNxxxx WWBBxxxx xxxxxxxx xxxxxxxx
7 xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx

PAL/JP MJ state object layout

  0 1 2 3  4 5 6 7  8 9 A B  C D E F
0 xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx
1 xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx
2 xxxxxxxx xxTTxxxx xxxxxxxx xxxxxxxx
3 xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx
4 xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx
5 xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx
6 RRAAxxxx xxxxxxxx PPNNxxxx W?B?xxxx
7 xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx

------------------------
-- Quick kill science --
------------------------

ff ff ff ff
^
Switches work
      ^
      Boss object deals damage

Fight controller object?

00 Player has been hit (switch)

20 Starting fight?
	0c ???

23 In jump phase
	01 Calculate next jump?
	02 In the air
	03 Landing?

25 waiting for hit
	00 Spawn switches
	01 Throw fireballs/lasers

27 Been hit

28 Play laser cutscene

29 Turning invisible

2B Waiting for tiny to get back on stage (phase reset?)

37 End fight
	00 Play boss end cutscene (key spawn not required)
	01 Quick kill (play boss cutscene and spawn key)
	04 Spawn key
	>04 Don't spawn key

40 Destroy boss object?
	05 Destroy boss object?

Aztec controller object

Freezing certain bytes in Aztec fight controller causes Barrel and Diddy to flash when Diddy takes damage
Could this be part of the quick kill?

FD0 Start controller object
04C Barrel X
050 Barrel Y
054 Barrel Z

Relative to dogadon object
b10

0x144 - Freezing causes quick kill to fail
0x145 - ??

0x154 - Freezing causes key not to spawn
0x155 - Freezing causes key not to spawn

---------------------
-- Stored position --
---------------------

Stored Positions:

-0.375, y, 1
-1, 527.25, 6.75

Copy of current position:

7FD740 - X
7FD744 - Y
7FD748 - Z

-------------------
-- Sync settings --
-------------------

countperop,vi refresh rate,ai count per byte
1,5000,5000=17.53
1,1500,600 =59.86 (music was out of sync)
1,1500,750 =59.92 (music was closer to sync but stopped too early)

----------------------------------
-- Bone array based spiking fix --
----------------------------------

Fix pseudocode:

current bones [bone array pointer]
current scores [bone array pointer]

each frame
	for each object in pointer array
		dump bone array
		calculate zero to non-zero ratio
		if lower than previous frame
			update bone array in current bones [bone array pointer]
			update ratio in current scores [bone array pointer]
		else
			overwrite bone array with one from current bones [bone array pointer]
		end
	end
end

clean out current bones array for objects that despawn